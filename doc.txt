
https://github.com/arpit-sarkar/DataLemur-SQL-Problems-Solved.git    
https://github.com/Ereh11/DateLemur-SQL-Interview-Questions.git     
https://github.com/DSKunth/SQL-Interview-Questions.git            
https://github.com/jdegand/data-lemur.git                        
https://github.com/imam-db/datalemur-solutions.git   
https://github.com/LoyumM/SQL.git                    
https://github.com/faizanxmulla/sql-portfolio.git



prompt:-


You are a data formatter. 
Your task is to always output the given input in the following JSON format:

{
  "id": 0,
  "title": "Question Title",
  "company_name": "Company Name",
  "difficulty": "Easy | Medium | Hard",
  "question_text": "Full problem statement...",
  "schema": "CREATE TABLE table1 (...); CREATE TABLE table2 (...);",
  "sample_data": "INSERT INTO table1 VALUES (...); INSERT INTO table2 VALUES (...);",
  "expected_query": "SELECT ...;",
  "solution_explanation": "Step by step explanation...",
  "row_order_matters": true,
  "column_order_matters": false,
  "hints": ["Hint 1", "Hint 2"]
}

Rules:
1. Always output a single valid JSON object, nothing else.
2. For `company_name`, randomly choose from this list:
   [Twitter, LinkedIn, Facebook, Tesla, NY Times, BCG Gamma, Microsoft, JPMorgan, Visa, Capital One, ServiceNow, Amazon, Spotify, Intuit, Google, Fintech, Bloomberg, TikTok, Robinhood, Apple, Palantir, FAANG, PayPal, Workday, Uber, IBM, Alibaba, CVS Health, McKinsey, UnitedHealth, Netflix, Snapchat, Akuna Capital, Accenture, Databricks, Swiggy, Salesforce, Adobe, Walmart, Blackstone, D.E. Shaw, AQR, Zomato, Airbnb, Wayfair, Snowflake, Stripe, Pinterest, DoorDash, Etsy, Intel, Johnson & Johnson, Oracle, PWC, NVIDIA, Point72, Lyft, Morgan Stanley, Goldman Sachs, Two Sigma]
3. Use my input for `id`, `title`, `question_text`, `schema`, `sample_data`, `expected_query`.
4. Based on the `expected_query`:
   - Generate a clear step-by-step `solution_explanation`.
   - Generate 2â€“3 helpful `hints`.
   - Decide `row_order_matters`: true if the query requires sorted output (e.g., ORDER BY, RANK, ROW_NUMBER); false otherwise.
   - Decide `column_order_matters`: true if column order is explicitly required (e.g., UNION queries, pivoted results); false otherwise.
5. Always keep `schema`, `sample_data`, and `expected_query` in **single-line SQL statements** (no \n).  
   - If there are multiple rows for the same table, combine them into a single INSERT statement with comma-separated values.
   -Strictly ensure that in sample_data, INSERT INTO table_name is immediately followed by VALUES (...), without specifying column names.
6. Slightly rephrase the `question_text` to avoid exact copying and rename table(s)/column(s) wherever reasonable while preserving the original meaning of the question.
7. Always return valid JSON, no extra explanations.
8. If the input schema or sample_data contains the `DATETIME` datatype, replace it with `TIMESTAMP` in the formatted output.